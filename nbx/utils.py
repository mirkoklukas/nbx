# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/01_utils.ipynb.

# %% auto 0
__all__ = ['get_logger', 'Bunch', 'nbx_home', 'nbx_lib', 'timestamp', 'listmap', 'arrmap', 'is_list', 'bunch_of_lists',
           'sliding_window_ind', 'run_bash', 'this_nb_to_html', 'defaultfrom', 'default_args', 'load_nb']

# %% ../notebooks/01_utils.ipynb 2
from pathlib import Path
import logging
import sys

def get_logger(name   = None, 
               form   = '[%(name)s] %(message)s', 
               level  = logging.INFO, 
               stream = None):
    
    if name is None: name = __name__
    logger = logging.getLogger(name)
    logger.setLevel(level)

    handler = logging.StreamHandler(stream)    
    formatter = logging.Formatter(form)
    handler.setFormatter(formatter)
    
    logger.handlers.clear()
    logger.addHandler(handler)
    
    return logger

# %% ../notebooks/01_utils.ipynb 4
class Bunch(dict):
    def __init__(self, **kwargs):
        super().__init__(kwargs)

    def __setattr__(self, key, value):
        self[key] = value

    def __dir__(self):
        return self.keys()

    def __getattr__(self, key):
        try:
            return self[key]
        except KeyError:
            raise AttributeError(key)

# %% ../notebooks/01_utils.ipynb 5
import nbx

def nbx_home():
    return Path(nbx.__file__).parents[1]

def nbx_lib():
    return Path(nbx.__file__).parents[0]

# %% ../notebooks/01_utils.ipynb 7
import time
import datetime

def timestamp(form='%Y-%m-%d_%H:%M:%S'):
    t = time.time()
    return datetime.datetime.fromtimestamp(t).strftime(form)

# %% ../notebooks/01_utils.ipynb 8
import numpy as np
from functools import reduce, partial

def listmap(f, arr):
    return list(map(f,arr))

def arrmap(f,arr):
    return np.array(listmap(f,arr))

def is_list(val):
    return hasattr(val, '__iter__') and type(val) != str

# %% ../notebooks/01_utils.ipynb 9
def bunch_of_lists(list_of_dicts, keys=None):
    y = {}    
    if keys is None: keys = list_of_dicts[0].keys()
    for k in keys: y[k] = arrmap(get(k), list_of_dicts)
    return Bunch(**y)

# %% ../notebooks/01_utils.ipynb 10
def sliding_window_ind(T, n, step, remainder=False):    
    if n > T:
        if remainder: return [], np.arange(T)
        else: return []
    
    I   = np.tile(np.arange(n)[:,None], T-n+1) + np.arange(T-n+1)[None]
    I   = I.T
    sub = np.arange(len(I), step=step)
    I   = I[sub]
    
    if remainder:
        i = I[-1]
        return I, np.arange(i[0] + step, T)
    else:
        return I

# %% ../notebooks/01_utils.ipynb 12
import subprocess

def run_bash(command):
    result = subprocess.run(command, shell=True, stdout=subprocess.PIPE)
    result = result.stdout.decode('UTF-8')
    return result.rstrip().split("\n")

# %% ../notebooks/01_utils.ipynb 14
import ipynbname

def this_nb_to_html(name="{nb}", pre="_", suff=""):
    """
    If called from within a notebook converts this 
    notebook to html and returns the html file name. 
    
    The html file name can be formated using 
    the notebook name `nb` and a current time stamp `t`.
    """
    t      = timestamp()
    path   = ipynbname.path().parent
    name   = ipynbname.name() # nb name
    rename = (pre + name + suff).format(nb=name, t=t) # renamed
    
    a = path/f"{name}.ipynb"
    b = path/f"{name}.html"
    c = path/f"{rename}.html"

    log(f"...Converting `./{a.name}` to `./{c.name}`.")
    run_bash(f"jupyter nbconvert {a} --to html ")
    run_bash(f"mv {b} {c}")
    
    return c

# %% ../notebooks/01_utils.ipynb 16
import inspect

def defaultfrom(c):
    """
    Binds values from context to 
    default KEYWORD-ONLY (!) arguments.
    """
    def deco(f):
        kw = inspect.getfullargspec(f).kwonlyargs
        kw_in_c = []
        for k in kw:
            if k in c: kw_in_c.append(k)


        def g(*args, **kwargs):
            for k in kw_in_c: 
                if k not in kwargs: kwargs[k] = c[k]

            return f(*args, **kwargs)

        
        return g
    
    return deco

# %% ../notebooks/01_utils.ipynb 17
def default_args(f):
    sig = inspect.signature(f)
    d = {}
    
    for k,v in sig.parameters.items():
        if v.default is not inspect.Parameter.empty:
            d[k] = v.default
            
    return d



# %% ../notebooks/01_utils.ipynb 19
import ipynbname
import json
def load_nb(fname):
    """Loads a a ipynotebook-bunch""" 
    try:
        nbdict = json.loads(fname)
    except:
        nbdict = json.load(open(fname,'r',encoding="utf-8"))
        
    nbdict["fname"] = str(fname)
    return Bunch(**nbdict)
