#AUTOGENERATED!

import argparse
from nbx.fileio import load, dump
from pathlib import Path
from nbx.confspace import ConfSpace
{% if ximp %}# NBX imports
{% for line in ximp %}{{line}}
{% endfor %}{% endif %}


def load_confspace(fname="confspace.json"):
	"""Load a confspace and testcases from a json src."""
	confspace = ConfSpace()
	jsonobj   = load(Path(__file__).parent/fname)
	for k,v in jsonobj["src"].items():
		confspace.add(k, eval(v))

	test_config = {}
	for k,v in jsonobj["default_src"].items():
		test_config[k] = eval(v)

	return confspace, [test_config]


def run_experiment({% for x in xarg %}{{x.name}}={{x.val}}{% if not loop.last %}, {% endif %}{% endfor %}):
	"""
	This is an auto-generated function 
	based on the jupyter notebook 
	> {{nbx_meta.nbname}}
	
	Don't judge, it might look ugly.

	Args:
		{% for x in xarg %}{{x.name}} ({{x.type}}): {{x.help}}{% if not loop.last %}
		{% endif %}{% endfor %}
	"""
	# NBX Function body...
	{% for line in func_body %}{{line}}{% if not loop.last %}
	{% endif %}{% endfor %}
	{% if nbx_return %}# NBX return
	return {{nbx_return}}{% endif %}


if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Just another NB experiment...')
	{% for x in xarg %}parser.add_argument('--{{x.name}}', dest="{{x.name}}", default={{x.val}}, type={{x.type}},  help="({{x.type}}) {{x.help}}"){% if not loop.last %}
	{% endif %}{% endfor %}
	args = parser.parse_args()
	run_experiment(**vars(args))